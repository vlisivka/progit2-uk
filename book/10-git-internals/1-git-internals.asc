[[_git_internals]]
==  Git зсередини

Ви могли прочитати майже всю книгу перед тим, як приступити до цієї глави, а могли тільки частину. Так чи інакше, в даній главі розглядаються внутрішні процеси Git і особливості його реалізації. На мій погляд, вивчення цього матеріалу це основа розуміння того, наскільки Git корисний і потужний інструмент. Хоча деякі стверджують, що виклад цього матеріалу може збити новачків з пантелику і виявитися для них невиправдано складним.
Саме тому ця глава віднесена в самий кінець, так що ви можете почати читати її раніше чи пізніше по ходу навчання.
Ми залишаємо вибір за вами.

Раз вже ви тут, почнемо.
По-перше, нагадаю, що Git - це, по суті, контентно-адресована файлова система з інтерфейсом системи контролю версій поверх неї.
Досить скоро стане зрозуміліше, що це означає.

На початках розвитку Git (приблизно до версії 1.5) інтерфейс був значно складніший, оскільки був більше схожий на інтерфейс доступу до файлової системи, ніж на закінчену систему контролю версій.
За останні роки, інтерфейс був значно очищений і спрощений до рівня аналогів; тим не менш, найчастіше, зберігається стереотип про те, що інтерфейс у Git надто складний і важкий для вивчення.

Контентно-адресована файлова система - основа Git, неймовірно крута, саме її ми розглянемо в цьому розділі в першу чергу; потім ви дізнаєтеся про транспортні механізми та інструменти обслуговування репозиторію, з якими вам свого часу, можливо, доведеться зіткнутися.

include::sections/plumbing-porcelain.asc[]

include::sections/objects.asc[]

include::sections/refs.asc[]

include::sections/packfiles.asc[]

include::sections/refspec.asc[]

include::sections/transfer-protocols.asc[]

include::sections/maintenance.asc[]

include::sections/environment.asc[]

=== Висновок

Тепер ви досить добре розумієте, що Git робить за лаштунками і, в деякій мірі, як він улаштований.
У цьому розділі ми розглянули кілька службових команд - більше низькорівневих і простих, ніж звичайні користувацькі команди, описані в іншій частині книги.

Розуміння принципів роботи Git на низькому рівні допоможе вам зрозуміти роботу Git в цілому і дасть можливість написати власні утиліти і сценарії для організації специфічного процесу роботи з Git.

Git як контентно-адресована файлова система - дуже потужний інструмент, який можна використовувати як щось більше, ніж просто систему контролю версій.
Сподіваємося, отримане знання внутрішньої реалізації Git допоможе вам написати свій крутий додаток, що використовує ці технології, і дозволить вам відчувати себе вільніше з Git навіть у просунутих речах.
