=== Змінні середовища

Git завжди запущений в bash і використовує деякі змінні shell середовища, щоб визначити, як вона поводиться.
Часом зручно знати, які саме константи використовуються, щоб Git працював саме так, як ви хочете.
Це не є вичерпним списоком змінних середовища, які використовує Git, але ми розглянемо найкорисніші.


==== Глобальна поведінку

Поведінка Git як комп'ютерної програми залежить від параметрів середовища.

*`GIT_EXEC_PATH`*  визначає де Git буде шукати свої підпрограми.
  Поточні параметри можна дізнатися командою `git --exec-path`.

*`HOME`* зазвичай не розглядається як змінний параметр (надто багато речей від нього залежать), але саме тут Git шукає глобальний файл конфігурації.
  Якщо вам потрібна по-справжньому portable-версія Git з власної глобальної конфігурацією, можете перевизначити `HOME` у профілі shell.

*`PREFIX`* аналогічна константа, але для загальносистемної конфігурації.
  Git шукає цей файл в `$PREFIX/etc/gitconfig`.

*`GIT_CONFIG_NOSYSTEM`*, якщо задана, відключає використання файлу загальносистемної конфігурації.
  Це стане в нагоді, якщо ваша системна конфігурація заважає вашим командам, а прав на її редагування або видалення у вас немає.

*`GIT_PAGER`* визначає програму для багатосторінкового виводу в командному рядку.
  Якщо не задана, в якості запасного варіанту використовується `PAGER`.

*`GIT_EDITOR`* це редактор, який Git запустить, коли користувачеві знадобиться відредагувати якийсь текст (наприклад, повідомлення до коміту).
  Якщо не задана, використається змінна `EDITOR`.


==== Розташування репозиторію

Git використовує деякі змінні середовища, щоб визначити як він взаємодіє з конкретним репозиторієм.

*`GIT_DIR`* — це місцерозташування директорії `.git`.
Якщо ця змінна не задана, Git буде переходити вгору по дереву каталогів, поки не досягне `~` (домашнього каталогу користувача) або `/` (кореневого каталогу), перевіряючи на кожному кроці наявність каталогу `.git`.

*`GIT_CEILING_DIRECTORIES`* управляє процесом пошуку каталогу `.git`.
Якщо ви працюєте з повільною файлової системою (типу стрічкового накопичувача або мережевий каталог), ви можете заборонити Git доступ до `.git` без потреби, наприклад, для побудови рядка вітання.

*`GIT_WORK_TREE`* — це шлях до робочого каталогу для не-серверного репозиторію (з непорожнім робочим каталогом). Якщо ця змінна не задана, буде використаний батьківський каталог `$GIT_DIR`.

*`GIT_INDEX_FILE`* — це шлях до файлу індексу (тільки для репозиторіїв з непорожнім робочим каталогом).

*`GIT_OBJECT_DIRECTORY`* може бути використана для вказівки каталогу з об'єктами замість `.git/objects`.

*`GIT_ALTERNATE_OBJECT_DIRECTORIES`* — це список розділених двокрапкою каталогів (типу `/dir/one:/dir/two:…`), в яких Git буде намагатися знайти об'єкти, яких немає в `GIT_OBJECT_DIRECTORY`.
Це може бути корисним, якщо ви працюєте над кількома проектами з однаковим вмістом, щоб не дублювати файли.


==== Шляхи до файлів

Ці змінні впливають на те, як Git буде розуміти шляхи до файлів і шаблони шляхів.
Ці настройки застосовуються до записів у файлах `.gitignore` і до шляхів, переданих в командному рядку (` git add * .c`).

*`GIT_GLOB_PATHSPECS` и `GIT_NOGLOB_PATHSPECS`* керують поведінкою шаблонів шляхів до файлів.
Якщо змінна `GIT_GLOB_PATHSPECS` встановлена ​​в 1, то спеціальні символи інтерпретуються стандартним для шаблонів чином; якщо ж `GIT_NOGLOB_PATHSPECS` встановлена ​​в 1, то спеціальні символи обробляються буквально, це означає, що, наприклад, запис` * .c` буде позначати лише єдиний файл з _іменем_ "* .c", а не всі файли з розширенням ".c ".
Цю поведінку можна перевизначити в кожному конкретному випадку, приписуючи до шляхів рядки `:(glob)` або `:(literal)`, наприклад `:(glob)*.c`.

*`GIT_LITERAL_PATHSPECS`*  відключає шаблони в шляхах: ні спеціальні символи, ні спеціальні префікси не працюватимуть.

*`GIT_ICASE_PATHSPECS`* робить всі шляхи незалежними від регістру.


==== Фіксація змін

Остаточне створення об'єктів-комітів зазвичай проводиться командою `git-commit-tree`, яка використовує наведені нижче змінні оточення як джерело інформації. І лише у випадку, якщо ці змінні не задані, вона буде використовувати дані з файлів конфігурації.

*`GIT_AUTHOR_NAME`* використовується для зазначення автора коміту.

*`GIT_AUTHOR_EMAIL`* задає адресу електронної пошти автора коміту.

*`GIT_AUTHOR_DATE`* час створення коміту.

*`GIT_COMMITTER_NAME`* використовується для вказівки людини, що застосував коміт.

*`GIT_COMMITTER_EMAIL`* задає адресу електронної пошти людини, що застосувала коміт.

*`GIT_COMMITTER_DATE`* час застосування коміту.

*`EMAIL`* використовується, як запасне значення, якщо конфігураційний параметр `user.email` не заданий.
Якщо ж і _ця змінна_ не задана, Git буде використовувати ідентифікатор користувача в системі та ім'я хоста.


==== Робота з мережею

Git використовує бібліотеку `curl` для роботи з мережею через HTTP.
Завдання змінної *`GIT_CURL_VERBOSE`* вказує Git'у виводити всі повідомлення, що генеруються цією бібліотекою.
Це схоже на використання `curl` з прапором` -v` в командному рядку.

*`GIT_SSL_NO_VERIFY`* відключає перевірку SSL сертифікатів.
Це може стати в нагоді якщо ви використовуєте самоподпісані сертифікати для роботи репозиторіїв через HTTPS, або якщо ви налаштовуєте Git сервер і ще не встановили необхідні сертифікати.

Якщо протягом більш ніж *`GIT_HTTP_LOW_SPEED_TIME`*  секунд швидкість передачі даних не піднімалася вище *`GIT_HTTP_LOW_SPEED_LIMIT`* байтів в секунду, Git перерве операцію.
Эти переменные замещают значения конфигурационных параметров `http.lowSpeedLimit` и `http.lowSpeedTime`.

*`GIT_HTTP_USER_AGENT`* задає заголовок `User-Agent` при роботі через HTTP.
За замовчуванням використовується щось на зразок `git/2.0.0`.


==== Порівняння файлів і злиття

*`GIT_DIFF_OPTS`* — злегка гучна назва для цієї змінної.
Єдиними допустимими значеннями є `-u<n>` и `--unified=<n>`, які задають кількість контекстних рядків, що показуються командою `git diff`.

*`GIT_EXTERNAL_DIFF`* заміщає конфігураційний параметр `diff.external`.
Якщо значення задано, Git викличе зазначену програму замість `git diff`.

*`GIT_DIFF_PATH_COUNTER`* і *`GIT_DIFF_PATH_TOTAL`* використовуються всередині програми, заданої через `GIT_EXTERNAL_DIFF` або `diff.external`.
Перша містить порядковий номер файлу який порівнюється (починаючи з 1), друга - повна кількість файлів, які підлягають порівнянню.

*`GIT_MERGE_VERBOSITY`* задає рівень деталізованості виведення при рекурсивному злитті.
Можливі значення перераховані нижче:

* 0 не виводити нічого, крім єдиного повідомлення про помилку.
* 1 виводити тільки конфлікти.
* 2 також виводити зміни у файлах.
* 3 показувати пропущені незмінені файли.
* 4 виводити всі шляхи при обробці.
* 5 і вище виводять навіть повідомлення для зневадження.

Типове значення рівне 2.

==== Зневадження

Хочете знати що _насправді_ робить Git?
Git веде досить докладний журнал виконаних дій і все що вам потрібно - ввімкнути його.
Можливі значення наведених нижче змінних наступні:

* "true", "1", або "2" – вивід здійснюється в стандартний потік помилок (stderr).
* Абсолютний шлях, що починається з `/` - вивід буде проводитися в зазначений файл.

*`GIT_TRACE`* задає журналювання дій, що не підпадають під яку-небудь певну категорію.
Це включає в себе розгортання аліасів та виклики зовнішніх програм.

[source,console]
----
$ GIT_TRACE=true git lga
20:12:49.877982 git.c:554               trace: exec: 'git-lga'
20:12:49.878369 run-command.c:341       trace: run_command: 'git-lga'
20:12:49.879529 git.c:282               trace: alias expansion: lga => 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.879885 git.c:349               trace: built-in: git 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.899217 run-command.c:341       trace: run_command: 'less'
20:12:49.899675 run-command.c:192       trace: exec: 'less'
----

*`GIT_TRACE_PACK_ACCESS`* задає журналювання звернень до pack-файлів.
При цьому перше виведене значення - файл, до якого відбувається звернення, а друге значення - зміщення всередині цього файлу.

[source,console]
----
$ GIT_TRACE_PACK_ACCESS=true git status
20:10:12.081397 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 12
20:10:12.081886 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 34662
20:10:12.082115 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 35175
# […]
20:10:12.087398 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 56914983
20:10:12.087419 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 14303666
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

*`GIT_TRACE_PACKET`* задає журналювання пакетів при операціях з мережею.

[source,console]
----
$ GIT_TRACE_PACKET=true git ls-remote origin
20:15:14.867043 pkt-line.c:46           packet:          git< # service=git-upload-pack
20:15:14.867071 pkt-line.c:46           packet:          git< 0000
20:15:14.867079 pkt-line.c:46           packet:          git< 97b8860c071898d9e162678ea1035a8ced2f8b1f HEAD\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow no-progress include-tag multi_ack_detailed no-done symref=HEAD:refs/heads/master agent=git/2.0.4
20:15:14.867088 pkt-line.c:46           packet:          git< 0f20ae29889d61f2e93ae00fd34f1cdb53285702 refs/heads/ab/add-interactive-show-diff-func-name
20:15:14.867094 pkt-line.c:46           packet:          git< 36dc827bc9d17f80ed4f326de21247a5d1341fbc refs/heads/ah/doc-gitk-config
# […]
----

*`GIT_TRACE_PERFORMANCE`* задає журналювання даних про продуктивність.
Вивід показує, як довго виконувалися ті чи інші дії.

[source,console]
----
$ GIT_TRACE_PERFORMANCE=true git gc
20:18:19.499676 trace.c:414             performance: 0.374835000 s: git command: 'git' 'pack-refs' '--all' '--prune'
20:18:19.845585 trace.c:414             performance: 0.343020000 s: git command: 'git' 'reflog' 'expire' '--all'
Counting objects: 170994, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (43413/43413), done.
Writing objects: 100% (170994/170994), done.
Total 170994 (delta 126176), reused 170524 (delta 125706)
20:18:23.567927 trace.c:414             performance: 3.715349000 s: git command: 'git' 'pack-objects' '--keep-true-parents' '--honor-pack-keep' '--non-empty' '--all' '--reflog' '--unpack-unreachable=2.weeks.ago' '--local' '--delta-base-offset' '.git/objects/pack/.tmp-49190-pack'
20:18:23.584728 trace.c:414             performance: 0.000910000 s: git command: 'git' 'prune-packed'
20:18:23.605218 trace.c:414             performance: 0.017972000 s: git command: 'git' 'update-server-info'
20:18:23.606342 trace.c:414             performance: 3.756312000 s: git command: 'git' 'repack' '-d' '-l' '-A' '--unpack-unreachable=2.weeks.ago'
Checking connectivity: 170994, done.
20:18:25.225424 trace.c:414             performance: 1.616423000 s: git command: 'git' 'prune' '--expire' '2.weeks.ago'
20:18:25.232403 trace.c:414             performance: 0.001051000 s: git command: 'git' 'rerere' 'gc'
20:18:25.233159 trace.c:414             performance: 6.112217000 s: git command: 'git' 'gc'
----

*`GIT_TRACE_SETUP`* задає журналювання інформації про репозиторій і оточення, в якому виконується сам Git.

[source,console]
----
$ GIT_TRACE_SETUP=true git status
20:19:47.086765 trace.c:315             setup: git_dir: .git
20:19:47.087184 trace.c:316             setup: worktree: /Users/ben/src/git
20:19:47.087191 trace.c:317             setup: cwd: /Users/ben/src/git
20:19:47.087194 trace.c:318             setup: prefix: (null)
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

==== Різне

*`GIT_SSH`* – зазначена програма (якщо значення задане) використається замість `ssh` коли Git працює по протоколу SSH.
Порядок виклику цієї програми буде такий: `$GIT_SSH [Ім'я користувача@]хост [-p <порт>] <команда>`.
Насправді, це не найпростіший спосіб налаштувати поведінку `ssh`: додаткові параметри командного рядка не підтримуються, і вам, швидше за все, доведеться писати скрипт-обгортку і вказати` GIT_SSH` на нього.

Можливо, простіше буде використати `~/.ssh/config`.

*`GIT_ASKPASS`* замінює значення конфігураційного параметра `core.askpass`.
Ця програма викликається Git'ом кожен раз, коли потрібно запросити у користувача пароль.
Рядок з текстом запиту передається цій програмі в якості аргументу командного рядка, а вивід значення вона повинна здійснювати в стандартний потік виводу (stdout).
(Читайте докладніше в главі <<_credential_caching>>.)

*`GIT_NAMESPACE`* управляє доступом до посилань всередині просторів імен аналогічно параметру `--namespace`.
Найчастіше ця змінна використовується на стороні сервера коли ви хочете зберігати кілька форків одного репозиторію, розділяючи лише посилання.

*`GIT_FLUSH`* змушує Git відключити буферизацію при записі в стандартний потік виводу (stdout).
Git буде частіше скидати дані у потік якщо значення виставлено в 1, якщо ж воно дорівнює 0, весь вивід буде буферизовано.
Типове (якщо нічого іншого не задано) значення вибирається залежно від виконуваних дій і способу виведення даних.

*`GIT_REFLOG_ACTION`* додає опис дії, що записується в reflog.
Наприклад:

[source,console]
----
$ GIT_REFLOG_ACTION="my action" git commit --allow-empty -m 'my message'
[master 9e3d55a] my message
$ git reflog -1
9e3d55a HEAD@{0}: my action: my message
----

