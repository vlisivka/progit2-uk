[[_replace]]
=== Замена

Объекты в Git неизменяемы, но он предоставляет интересный способ эмулировать замену объектов в своей базе другими объектами.

Команда `replace` позволяет вам указать объект Git и сказать "каждый раз, когда встречается этот объект, заменяй его другим". В основном, это бывает полезно для замены одного коміту в вашей истории другим.

Например, допустим в вашем проекте огромная история изменений и вы хотите разбить ваш репозиторий на два – один с короткой историей для новых разработчиков, а другой с более длинной историей для людей, интересующихся анализом истории. Вы можете пересадить одну историю на другую, 'заменяя' самый первый коміт в короткой истории последним комітом в длинной истории. Это удобно, так как вам не придется по-настоящему изменять каждый коміт в новой истории, как это вам бы потребовалось делать в случае обычного объединения историй (так как родословная комітів влияет на SHA-1).

Давайте испробуем как это работает, возьмем существующий репозиторий и разобьем его на два – один со свежими правками, а другой с историческими, и затем посмотрим как мы можем воссоединить их с помощью операции `replace`, не изменяя при этом значений SHA-1 в свежем репозитории.

Мы будем использовать простой репозиторий с пятью комітами:

[source,console]
----
$ git log --oneline
ef989d8 fifth commit
c6e1e95 fourth commit
9c68fdc third commit
945704c second commit
c1822cf first commit
----

Мы хотим разбить его на два семейства историй. Одно семейство, которое начинается от первого коміту и заканчивается четвертым, будет историческим. Второе, состоящее пока только из четвертого и пятого комітів – будет семейством со свежей историей.

image::images/replace1.png[]

Создать историческое семейство легко, мы просто создаем ветку с вершиной на нужном коміті и затем отправляем эту ветку как `master` в новый удаленный репозиторий.

[source,console]
----
$ git branch history c6e1e95
$ git log --oneline --decorate
ef989d8 (HEAD, master) fifth commit
c6e1e95 (history) fourth commit
9c68fdc third commit
945704c second commit
c1822cf first commit
----

image::images/replace2.png[]

Теперь мы можем отправить только что созданную ветвь `history` в ветку `master` нашего нового репозитория:

[source,console]
----
$ git remote add project-history https://github.com/schacon/project-history
$ git push project-history history:master
Counting objects: 12, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (12/12), 907 bytes, done.
Total 12 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (12/12), done.
To git@github.com:schacon/project-history.git
 * [new branch]      history -> master
----

Таким образом, наша история опубликована, а мы теперь займемся более сложной частью – усечем свежую историю. Нам необходимо перекрытие, так чтобы мы смогли заменить коміт из одного части комітом из другой, то есть мы будет обрезать историю, оставив четвертый и пятый коміти (таким образом четвертый коміт будет входить в пересечение).

[source,console]
----
$ git log --oneline --decorate
ef989d8 (HEAD, master) fifth commit
c6e1e95 (history) fourth commit
9c68fdc third commit
945704c second commit
c1822cf first commit
----

В данном случае будет полезным создать базовый коміт, содержащий инструкции о том как раскрыть историю, так другие разработчики будут знать что делать, если они столкнулись с первым комітом урезанной истории и нуждаются в остальной истории. Итак, далее мы создадим объект заглавного коміту, представляющий нашу отправную точку с инструкциями, а затем перебазируем оставшиеся коміти (четвертый и пятый) на этот коміт.

Для того, чтобы сделать это, нам нужно выбрать точку разбиения, которой для нас будет третий коміт, хеш которого `9c68fdc`. Таким образом, наш базовый коміт будет основываться на этом дереве. Мы может создать наш базовый коміт, используя команду `commit-tree`, которая просто берет дерево и возвращает SHA-1 объекта, представляющего новый сиротский коміт.

[source,console]
----
$ echo 'get history from blah blah blah' | git commit-tree 9c68fdc^{tree}
622e88e9cbfbacfb75b5279245b9fb38dfea10cf
----

[NOTE]
=====
Команда `commit-tree` входит в набор команд, которые обычно называются 'сантехническими'. Это команды, которые обычно не предназначены для непосредственного использования, но вместо этого используются **другими** командами Git для выполнения небольших задач. Периодически, когда мы занимаемся странными задачами подобными текущей, эти команды позволяют нам делать низкоуровневые вещи, но все они не предназначены для повседневного использования. Вы можете прочитать больше о сантехнических командах в <<_plumbing_porcelain>>.
=====

image::images/replace3.png[]

Хорошо. Теперь когда у нас есть базовый коміт, мы можем перебазировать нашу оставшуюся историю на этот коміт используя `git rebase --onto`. Значением аргумента `--onto` будет SHA-1 хеш коміту, которую мы только что получили от команды `commit-tree`, а перебазируемой точкой будет третий коміт (родитель первого коміту, который мы хотим сохранить, `9c68fdc`):

[source,console]
----
$ git rebase --onto 622e88 9c68fdc
First, rewinding head to replay your work on top of it...
Applying: fourth commit
Applying: fifth commit
----

image::images/replace4.png[]

Таким образом, мы переписали нашу свежую историю поверх вспомогательного базового коміту, который теперь содержит инструкции о том, как при необходимости восстановить полную историю. Мы можем отправить эту  историю в новый проект и теперь, когда люди клонируют его репозиторий, они будут видеть только два свежих коміту и после них базовый коміт с инструкциями.

Давайте представим себя на месте кого-то, кто впервые склонировал проект и хочет получить полную историю.
Для получения исторических данных после клонирования усеченного репозитория, ему нужно добавить в список удаленных репозиториев исторический репозиторий и извлечь из него данные:

[source,console]
----
$ git clone https://github.com/schacon/project
$ cd project

$ git log --oneline master
e146b5f fifth commit
81a708d fourth commit
622e88e get history from blah blah blah

$ git remote add project-history https://github.com/schacon/project-history
$ git fetch project-history
From https://github.com/schacon/project-history
 * [new branch]      master     -> project-history/master
----

Теперь у этого пользователя его собственные свежие коміти будут находиться в ветке `master`, а исторические коміти в ветке `project-history/master`.

[source,console]
----
$ git log --oneline master
e146b5f fifth commit
81a708d fourth commit
622e88e get history from blah blah blah

$ git log --oneline project-history/master
c6e1e95 fourth commit
9c68fdc third commit
945704c second commit
c1822cf first commit
----

Для объединения этих веток вы можете просто вызывать `git replace`, указав коміт, который вы хотите заменить, и коміт, которым вы хотите заменить первый. Так мы хотим заменить "четвертый" коміт в основной ветке "четвертым" комітом из ветки `project-history/master`:

[source,console]
----
$ git replace 81a708d c6e1e95
----

Если теперь вы посмотрите историю ветки `master`, то должны увидеть нечто подобное:

[source,console]
----
$ git log --oneline master
e146b5f fifth commit
81a708d fourth commit
9c68fdc third commit
945704c second commit
c1822cf first commit
----

Здорово, не правда ли? Не изменяя SHA-1 всех комітів семейства, мы можем заменить один коміт в нашей истории совершенно другим комітом и все обычные утилиты (`bisect`, `blame` и т.д.) будут работать как от них это и ожидается.

image::images/replace5.png[]

Интересно, что для четвертого коміту SHA-1 хеш выводится равной `81a708d`, хотя в действительности он содержит данные коміту `c6e1e95`, которым мы его заменили. Даже если вы выполните команду типа `cat-file`, она отобразит замененные данные:

[source,console]
----
$ git cat-file -p 81a708d
tree 7bc544cf438903b65ca9104a1e30345eee6c083d
parent 9c68fdceee073230f19ebb8b5e7fc71b479c0252
author Scott Chacon <schacon@gmail.com> 1268712581 -0700
committer Scott Chacon <schacon@gmail.com> 1268712581 -0700

fourth commit
----

Помните, что настоящим родителем коміту `81a708d` был наш вспомогательный базовый коміт (`622e88e`), а не `9c68fdce` как это отмечено здесь.

Другое интересное замечание состоит в том, что информация о произведенной замене сохранена у нас в ссылках:

[source,console]
----
$ git for-each-ref
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/heads/master
c6e1e95051d41771a649f3145423f8809d1a74d4 commit	refs/remotes/history/master
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/remotes/origin/HEAD
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/remotes/origin/master
c6e1e95051d41771a649f3145423f8809d1a74d4 commit	refs/replace/81a708dd0e167a3f691541c7a6463343bc457040
----

Следовательно можно легко поделиться заменами – для этого мы можем отправить их на наш сервер, а другие люди могут легко скачать их оттуда. Это не будет полезным в случае если вы используете `replace` для пересадки истории (так как в этом случае все люди будут скачивать обе истории, тогда зачем мы разделяли их?), но это может быть полезным в других ситуациях.
